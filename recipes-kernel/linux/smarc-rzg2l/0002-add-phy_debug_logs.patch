diff --git a/drivers/net/mdio/of_mdio.c b/drivers/net/mdio/of_mdio.c
index 4daf94bb56a5..eaa68ce2f5bd 100644
--- a/drivers/net/mdio/of_mdio.c
+++ b/drivers/net/mdio/of_mdio.c
@@ -119,6 +119,7 @@ static int of_mdiobus_register_phy(struct mii_bus *mdio,
 
 	is_c45 = of_device_is_compatible(child,
 					 "ethernet-phy-ieee802.3-c45");
+	printk("DEBUG: of_device_is_compatible() is_c45 %d\n",is_c45);
 
 	if (!is_c45 && !of_get_phy_id(child, &phy_id))
 		phy = phy_device_create(mdio, addr, phy_id, 0, NULL);
@@ -279,15 +280,22 @@ int of_mdiobus_register(struct mii_bus *mdio, struct device_node *np)
 	/* Loop over the child nodes and register a phy_device for each phy */
 	for_each_available_child_of_node(np, child) {
 		addr = of_mdio_parse_addr(&mdio->dev, child);
+		printk("DEBUG: HARDCODE ADDRESS TO 0 FOR TESTING!\n");
+		addr = 0;
 		if (addr < 0) {
 			scanphys = true;
 			continue;
 		}
 
-		if (of_mdiobus_child_is_phy(child))
+		if (of_mdiobus_child_is_phy(child)) {
+			printk("DEBUG: of_mdiobus_child_is_phy returned true, expected!\n");
 			rc = of_mdiobus_register_phy(mdio, child, addr);
-		else
+			printk("DEBUG: of_mdiobus_register_phy() rc %d, addr %d", rc, addr);
+		} else {
+			printk("DEBUG: of_mdiobus_child_is_phy returned false, not expected!\n");
 			rc = of_mdiobus_register_device(mdio, child, addr);
+			printk("DEBUG: of_mdiobus_register_device()rc %d\n", rc);
+		}
 
 		if (rc == -ENODEV)
 			dev_err(&mdio->dev,
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index d2f6d8107595..4e4356c2572b 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -845,9 +845,10 @@ struct phy_device *get_phy_device(struct mii_bus *bus, int addr, bool is_c45)
 	c45_ids.mmds_present = 0;
 	memset(c45_ids.device_ids, 0xff, sizeof(c45_ids.device_ids));
 
-	if (is_c45)
+	if (is_c45) {
 		r = get_phy_c45_ids(bus, addr, &c45_ids);
-	else
+		printk("DEBUG: get_phy_c45_ids(%d, %d, %p) %d\n",bus,addr,&c45_ids,r);
+	} else
 		r = get_phy_c22_id(bus, addr, &phy_id);
 
 	if (r)
